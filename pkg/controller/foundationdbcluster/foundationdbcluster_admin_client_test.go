package foundationdbcluster

import (
	"testing"

	"github.com/apple/foundationdb/bindings/go/src/fdb"
	"github.com/onsi/gomega"
	appsv1beta1 "github.com/foundationdb/fdb-kubernetes-operator/pkg/apis/apps/v1beta1"
)

func TestGettingConfigurationKeys(t *testing.T) {
	g := gomega.NewGomegaWithT(t)
	configuration := DatabaseConfiguration{
		ReplicationMode: "double",
		StorageEngine:   "ssd",
		RoleCounts: appsv1beta1.RoleCounts{
			Logs: 5,
		},
	}
	g.Expect(configuration.getConfigurationKeys()).To(gomega.Equal([]fdb.KeyValue{
		fdb.KeyValue{Key: fdb.Key("\xff/conf/storage_replicas"), Value: []byte("2")},
		fdb.KeyValue{Key: fdb.Key("\xff/conf/storage_quorum"), Value: []byte("2")},
		fdb.KeyValue{Key: fdb.Key("\xff/conf/log_replicas"), Value: []byte("2")},
		fdb.KeyValue{Key: fdb.Key("\xff/conf/log_anti_quorum"), Value: []byte("0")},
		fdb.KeyValue{Key: fdb.Key("\xff/conf/storage_replication_policy"), Value: []byte(
			"\x01\x00\x04\x51\xa5\x00\xdb\x0f\x06\x00\x00\x00Across\x06\x00\x00\x00zoneid\x02\x00\x00\x00\x03\x00\x00\x00One",
		)},
		fdb.KeyValue{Key: fdb.Key("\xff/conf/log_replication_policy"), Value: []byte(
			"\x01\x00\x04\x51\xa5\x00\xdb\x0f\x06\x00\x00\x00Across\x06\x00\x00\x00zoneid\x02\x00\x00\x00\x03\x00\x00\x00One",
		)},
		fdb.KeyValue{Key: fdb.Key("\xff/conf/logs"), Value: []byte("5")},
		fdb.KeyValue{Key: fdb.Key("\xff/conf/storage_engine"), Value: []byte("2")},
		fdb.KeyValue{Key: fdb.Key("\xff/conf/log_engine"), Value: []byte("2")},
	}))

}

func TestSerializingLocalityPolicies(t *testing.T) {
	g := gomega.NewGomegaWithT(t)
	var policy localityPolicy
	policy = &singletonPolicy{}
	g.Expect(policy.BinaryRepresentation()).To(gomega.Equal([]byte("\x03\x00\x00\x00One")))
	policy = &acrossPolicy{
		Count:     2,
		Field:     "zoneid",
		Subpolicy: &singletonPolicy{},
	}
	g.Expect(policy.BinaryRepresentation()).To(gomega.Equal([]byte("\x06\x00\x00\x00Across\x06\x00\x00\x00zoneid\x02\x00\x00\x00\x03\x00\x00\x00One")))
}

func TestDecodingStorageServer(t *testing.T) {
	g := gomega.NewGomegaWithT(t)
	encoded := []byte("\x01\x00\x01p\xa5\x00\xdb\x0f\xe7'PY\x9c0\xd21\xab\xa2\xf9\xca\xd2\xe2's\x03\x00\x00\x00\x00\x00\x00\x00\x09\x00\x00\x00machineid\x01\x1c\x00\x00\x00foundationdbcluster-sample-2\x09\x00\x00\x00processid\x01 \x00\x00\x00af1b37bcba299ae3382e3d5b81b5bb44\x06\x00\x00\x00zoneid\x01\x1c\x00\x00\x00foundationdbcluster-sample-2\xfb\x04\x01\x0a\x94\x11\x00\x00?Y\xf4\xc6\xd7\x06j\xa84\x00\x00\x00\xa69\xf1J\xfb\x04\x01\x0a\x94\x11\x00\x00\xcb\xa5\xf9\x0d\xb1c\x9c\x0a1\x00\x00\x009\x12\xa4\xa2\xfb\x04\x01\x0a\x94\x11\x00\x00K{\x80E\xca\xfe\x1d\x0a2\x00\x00\x00\xb0\x9cC\xaf\xfb\x04\x01\x0a\x94\x11\x00\x003kp\xbef\x04=H3\x00\x00\x00\x8e(f\x96\xfb\x04\x01\x0a\x94\x11\x00\x00\xb5U\xe4\x89\xaa\xb0\x89\x185\x00\x00\x00\xba'\x82R\xfb\x04\x01\x0a\x94\x11\x00\x00\x0d\xf1D\xbe\xa5\xa0\x81\x866\x00\x00\x00\xaf\x9f-\xf9\xfb\x04\x01\x0a\x94\x11\x00\x00\x85=\xe9\xc6R\xa6\xa6\x9c7\x00\x00\x00W\xac-C\xfb\x04\x01\x0a\x94\x11\x00\x00U\xee\xf2\xf0\xc9\xfb\x95G8\x00\x00\x00\xa01\xdbE\xfb\x04\x01\x0a\x94\x11\x00\x00\xe9\xb9\xe8),\x81729\x00\x00\x00-\xa0i_\xfb\x04\x01\x0a\x94\x11\x00\x00\x0bQ\xb6y4\x17\xc7f:\x00\x00\x006\xad*\x00\xfb\x04\x01\x0a\x94\x11\x00\x00\x8d\xe0\x9dIx Z\x93;\x00\x00\x00\xa4\xf1\xe6\xeb\xfb\x04\x01\x0a\x94\x11\x00\x00\xd1gNnQ\xeb\x0e\xf9<\x00\x00\x00v\x08\x1bc")
	address, err := decodeStorageServerAddress(encoded)
	g.Expect(err).NotTo(gomega.HaveOccurred())
	g.Expect(address).To(gomega.Equal("10.1.4.251:4500"))
}

func TestDecodingLogList(t *testing.T) {
	g := gomega.NewGomegaWithT(t)
	encoded := []byte("\x01\x00\x01p\xa5\x00\xdb\x0f\x03\x00\x00\x00\xb2\xdd\xbb\x0c/K\xfb\xb1\x9f\xaaST\x8e\xc9z\xa6\xfb\x04\x01\x0a\x94\x11\x00\x00\xc6d\xff9\xc2\xbc\xbfd(\x1c\xfbI\xfe\xefI\xc1\xfe\x04\x01\x0a\x94\x11\x00\x00B\xf3\x7f\xbb\x02f\xf5\xc8\x0ao\x8a\x0bc\xbe6k\xfd\x04\x01\x0a\x94\x11\x00\x00\x03\x00\x00\x00\xd38\x06\x10\xa2\xd4\x14#\x1e`'h\x82\xd6\x9ep\xfb\x04\x01\x0a\x94\x11\x00\x00\xce\xab\x0e>\xb0\x99\xe1l\xb6\xfa\xaa\xa2R\x12\xac\xc5\xfe\x04\x01\x0a\x94\x11\x00\x00~|f\xbaE\xacg\x84Q\xba\xa5=RL\x1fX\xfd\x04\x01\x0a\x94\x11\x00\x00")
	addresses, offset := decodeLogList(encoded[8:])
	g.Expect(len(addresses)).To(gomega.Equal(3))
	g.Expect(addresses[0]).To(gomega.Equal("10.1.4.251:4500"))
	g.Expect(addresses[1]).To(gomega.Equal("10.1.4.254:4500"))
	g.Expect(addresses[2]).To(gomega.Equal("10.1.4.253:4500"))
	g.Expect(offset).To(gomega.Equal(76))
}
